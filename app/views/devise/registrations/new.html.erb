<canvas id="canvas"></canvas>

<header class='top-page-header'>
  <div class='search-bar-contents'>
   <div class="icon-box">
    <%= link_to image_tag('cuota-sample.png', class:"cuota-icon"), "/" %>
   </div> 
  </div>
</div>

<h1>新規登録</h1>

<%= render "devise/shared/error_messages", resource: resource %>
<div class="box">
  <div class="box-inner">
    <%= form_with model: @nursing_teacher, url: registration_path(resource_name), local: true do |f| %>
      

    <div class="box-full-name">
        <div class="a-row-full-name">
          <div class="column-left">
            <%= f.label :last_name, "氏名" %>
          </div>
          <div class="column-right">
            <span class="mandatory">必須</span>
          </div>
        </div>
        <div class="a-row-full-name-field">
          <div class="column-left">
            <%= f.text_field :last_name, autofocus: true, placeholder: "例)  田中 ", autocomplete: "last_name" %>
          </div>
          <div class="column-right">
            <%= f.text_field :first_name, placeholder: "例)  太郎 ", autocomplete: "first_name" %>
          </div>
        </div>
      </div>
  
    <div class="box-email">
     <div class="a-row">
        <div class="column-left">
      <%= f.label :email, "メールアドレス" %>
      </div>
        <div class="column-right">
      <span class="mandatory">必須</span>
      </div>
      <%= f.email_field :email, placeholder: "例)  tanaka@email ", autocomplete: "email" %>
    </div>
  
    <div class="box-password">
      <div class="a-row">
        <div class="column-left">
          <%= f.label :password, "パスワード" %>
        </div>
        <div class="column-right">
         <%= link_to "パスワードを忘れた場合", '#' %>
         <span class="mandatory">必須</span>
        </div>
      </div>
          <%= f.password_field :password, autocomplete: "new-password" %>
          <% if @minimum_password_length %>
             <em>(<%= @minimum_password_length %> 文字以上で入力してください)</em>
        <% end %>
    </div>
  
    <div class="box-password_confirmation">
    <div class="a-row">
        <div class="column-left">
      <%= f.label :password_confirmation, "パスワード確認用" %>
      </div>
       <div class="column-right">
      <span class="mandatory">必須</span>
      </div>
      <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
    </div>
  
    <div class="box-school">
    <div class="a-row">
        <div class="column-left">
      <%= f.label :school_id, "学校名" %>
      </div>
       <div class="column-right">
      <span class="mandatory">必須</span>
      </div>
      <%= f.collection_select(:school_id, School.all, :id, :name, {include_blank:'選択してください'}, {class:"select-box", id:"school-name"}) %>
    </div>

    <div>
      <%= f.file_field :image %>
    </div>

     <% if devise_mapping.rememberable? %>
        <div class="remember">
          <%= f.check_box :remember_me %>
          <%= f.label :remember, "ログインしたままにする" %>
        </div>
     <% end %>
  
    <div class="box-login">
      <%= f.submit "新規登録" %>
    </div>
  
    <div class="legal-text">
        続行することで、Cuotaの
        <%= link_to "利用規約", "#" %>
        および
        <%= link_to "プライバシー規約", "#" %>
        に同意するものとみなされます。
    </div>
     
    <% end %>

  </div>
    <%= render "devise/shared/links" %>
  </div>

<script>

var livePatern = {
  canvas: null,
  context: null,
  cols: 0,
  rows: 0,
  colors: [252, 251, 249, 248, 241, 240],
  triangleColors: [],
  destColors: [],
  
  init: function(){
    this.canvas = document.getElementById('canvas');
    this.context = this.canvas.getContext('2d');
    this.cols = Math.floor(document.body.clientWidth / 24);
    this.rows = Math.floor(document.body.clientHeight / 24) + 1;
    
    this.canvas.width = document.body.clientWidth;
    this.canvas.height = document.body.clientHeight;
    
    this.drawBackground();
    this.animate();
  },
  
  drawTriangle: function(x, y, color, inverted){
    inverted = inverted == undefined ? false : inverted;

    this.context.beginPath();
    this.context.moveTo(x, y);
    this.context.lineTo(inverted ? x - 22 : x + 22, y + 11);
    this.context.lineTo(x, y + 22);
    this.context.fillStyle = "rgb("+color+","+color+","+color+")";
    this.context.fill();
    this.context.closePath();
  },
  
  getColor: function(){    
    return this.colors[(Math.floor(Math.random() * 6))];
  },
  
  drawBackground: function(){
    var eq = null;
    var x = this.cols;
    var destY = 0;
    var color, y;
    
    while(x--){
      eq = x % 2;
      y = this.rows;

      while(y--){
        destY = Math.round((y-0.5) * 24);

        this.drawTriangle(x * 24 + 2, eq == 1 ? destY : y * 24, this.getColor());
        this.drawTriangle(x * 24, eq == 1 ? destY  : y * 24, this.getColor(), true);
      }
    }
  },
  
  animate: function(){
    var me = this;

    var x = Math.floor(Math.random() * this.cols);
    var y = Math.floor(Math.random() * this.rows);
    var eq = x % 2;

    if (eq == 1) {
      me.drawTriangle(x * 24, Math.round((y-0.5) * 24) , this.getColor(), true);
    } else {
      me.drawTriangle(x * 24 + 2, y * 24, this.getColor());
    }

    setTimeout(function(){    
      me.animate.call(me);
    }, 10);
  },
};

!function(){livePatern.init();}()

</script>
